@inject IDogService dogService
@using BestBoyClient.Components
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Align="Align.Center" Class="my-5">@($"{user.Identity.Name}'s dogs")</MudText>

@if (dogs.Count == 0)
{
    <LoadingPanel />
}
<MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.ExtraLarge" Style="width:98%">
    <MudGrid>
        @foreach (var dog in dogs)
        {
            <DogCard Dog="dog" DeleteById="DeleteById"></DogCard>
        }
    </MudGrid>
</MudContainer>



@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private System.Security.Claims.ClaimsPrincipal user;
    List<DogDTO> dogs = new List<DogDTO>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;
        dogs = (await dogService.GetUserDogs()).ToList();
    }

    private async Task DeleteById(int id)
    {
        bool deleted = await dogService.Delete(id);

        if (deleted)
        {
            var dogToDelete = dogs.SingleOrDefault(d => d.Id == id);
            dogs.Remove(dogToDelete);
            Snackbar.Add("Dog deleted succesfully", Severity.Success);
            return;
        }

        Snackbar.Add("Error, dog could not be deleted", Severity.Error);

    }
}
